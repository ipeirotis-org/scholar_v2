name: Deploy Google Cloud Functions

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: scholar-version2
  # REGION is now defined in the matrix

jobs:
  deploy-cloud-functions:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Set to true if you want the whole workflow to fail if one deployment fails
      matrix:
        region:  [ "us-central1",  "us-east1",  "us-east4", "us-east5", "us-south1",  "us-west1", "us-west2", "us-west3", "us-west4"]

        function_details:
          # Define each function with its specific details
          - name: fill_publication
            timeout: "60s" 
            memory: 512MB
          - name: search_author_id
            timeout: "3600s"
            memory: 512MB
          - name: find_scholar_id_from_name
            timeout: "3600s"
            memory: 512MB

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Authenticate to Google Cloud FIRST
    - name: Authenticate to Google Cloud
      id: auth # Optional: give the step an ID if needed
      # Use the official Google Cloud Auth action
      uses: google-github-actions/auth@v2 # Use version v2 or later
      with:
        # Use credentials_json if you are using a service account key stored in secrets
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Authenticate with Google Cloud using encoded JSON key
      run: |
        echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json

    - name: Prepare shared code for Cloud Function ${{ matrix.function_details.name }}
      run: |
        # Ensure the target shared directory exists before copying
        mkdir -p ./functions/${{ matrix.function_details.name }}/shared/
        cp -r ./shared/* ./functions/${{ matrix.function_details.name }}/shared/

    - name: Deploy Cloud Function ${{ matrix.function_details.name }} to ${{ matrix.region }}
      run: |
        FUNCTION_NAME="${{ matrix.function_details.name }}"
        REGION="${{ matrix.region }}"
        SOURCE_DIR="./functions/${FUNCTION_NAME}/"
        ENTRY_POINT="${FUNCTION_NAME}"
        RUNTIME="python312"
        MEMORY="${{ matrix.function_details.memory }}" # Use memory from matrix
        
        # Base command
        CMD="gcloud functions deploy ${FUNCTION_NAME} \
          --region ${REGION} \
          --entry-point ${ENTRY_POINT} \
          --runtime ${RUNTIME} \
          --trigger-http \
          --allow-unauthenticated \
          --memory=${MEMORY} \
          --gen2 \
          --source ${SOURCE_DIR}"

        # Add timeout flag only if specified in the matrix
        TIMEOUT="${{ matrix.function_details.timeout }}"
        if [[ -n "$TIMEOUT" ]]; then
          CMD="${CMD} --timeout=${TIMEOUT}"
        fi

        echo "Executing deployment for $FUNCTION_NAME in $REGION..."
        echo "$CMD"
        eval $CMD # Use eval to execute the constructed command string
